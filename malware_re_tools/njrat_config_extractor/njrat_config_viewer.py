import streamlit as st
import os
import sys
import re
from pathlib import Path
import yaml
import json
import pandas as pd
from PIL import Image
from collections import Counter
import operator
import numpy as np
import base64

curdir = os.getcwd()
def render_image(image_file_path,caption_note=""):
    img = Image.open(image_file_path)
    st.image(img,caption=caption_note)
    return

def banner(self):
    banner_img_path = os.path.join(curdir,"njrat_config_viewer/images/banner-nj.png")
    icon_img_path = os.path.join(curdir,"njrat_config_viewer/images/Br3akp0int.png")
    render_image(banner_img_path)
    st.divider()
    st.sidebar.success("Task List.")
    with st.sidebar:
        render_image(icon_img_path,"Br3akp0int")
    return

def parse_yaml_data():
    yaml_file_path = os.path.join(curdir, "njrat_config_viewer/njrat_config_info.yaml")
    
    with open(yaml_file_path, "r") as f:
        yml_buff = yaml.safe_load(f)
    
    for config_list in yml_buff["njrat_extract_config"]:
        st.error("sha256: {0}".format(config_list["sha256"]))
        with st.expander("raw CIL config code:"):
            code = config_list["config_raw_code_block"]
            st.code(code, language="cil")
        with st.expander("string config:"):
            config = "\n".join(config_list["config_str"])
            st.code(config, language="cil")
    return

def config_viewer():
    banner(banner)

    parse_yaml_data()
    return


def stats():
    yaml_file_path = os.path.join(curdir, "njrat_config_viewer/njrat_config_info.yaml")
    with open(yaml_file_path, "r") as f:
        yml_buff = yaml.safe_load(f)
    mixed_list = []
    for config_list in yml_buff["njrat_extract_config"]:
        mixed_list += config_list["config_str"]
    count_occurence = dict(Counter(mixed_list))
    col1, col2 = st.columns((2, 3))

    rows = []
    for k, v in count_occurence.items():
        row = {"config_value": k, "config_value_count": v}
        rows.append(row)

    df = pd.DataFrame(rows)


    possible_persistence = pd.DataFrame(columns=["config_value", "config_value_count"])
    possible_port = pd.DataFrame(columns=["config_value", "config_value_count"])
    possible_c2 = pd.DataFrame(columns=["config_value", "config_value_count"])
    possible_exe = pd.DataFrame(columns=["config_value", "config_value_count"])
    possible_b64 = pd.DataFrame(columns=["config_value", "config_value_count"])
    decoded_b64 = []

    def check_c2(config_v):
        if config_v.count(".") > 2:
            return True
        elif config_v.count(".") > 1 and ".exe" not in config_v:
            return True
        if config_v.count("//") > 2:
            return True
        else:
            return False
    
    def check_port(config_p):
        if len(config_p) <=6:
            ptn = re.compile("^[0-9]{3,6}")
            res = ptn.findall(config_p)
            if not res:
                return False
            else:
                return True
    
    def check_reg(config_r):
        if config_r.count("\\") > 2:
            return True
        else:
            return False
        
    def check_exe(config_e):
        if ".exe" in config_e or "exe." in config_e:
            return True
        else:
            return False

    def check_b64(config_b):

        ptn = re.compile("^[A-Za-z0-9+/]*={1,2}$")
        res = ptn.findall(config_b)
        if not res:
            return False
        else:
            return True
        
    
    p_c2 = []    
    for i,r in df.iterrows():
        if (check_c2(r['config_value'])):
            possible_c2 = possible_c2.append(r, ignore_index=True)
        if (check_port(r['config_value'])):
            possible_port = possible_port.append(r, ignore_index=True)
        if (check_reg(r['config_value'])):
            possible_persistence = possible_persistence.append(r, ignore_index=True)
        if (check_exe(r['config_value'])):
            possible_exe = possible_exe.append(r, ignore_index=True) 
        if (check_b64(r['config_value'])):
            possible_b64 = possible_b64.append(r, ignore_index=True)
            dec_b64 = base64.b64decode(str(r['config_value']))
            string_utf8 = bytes(dec_b64).decode('utf-8')
            decoded_b64.append(string_utf8)

    with st.expander("possible c2 server stats:"):
        st.bar_chart(possible_c2.set_index('config_value')['config_value_count'])
    with st.expander("possible c2 port stats:"):
        st.bar_chart(possible_port.set_index('config_value')['config_value_count'])
    with st.expander("possible drop filename stats:"):
        st.bar_chart(possible_exe.set_index('config_value')['config_value_count'])
    with st.expander("possible registy persistence stats:"):
        st.bar_chart(possible_persistence.set_index('config_value')['config_value_count'])
    with st.expander("possible b64 stats:"):
        st.bar_chart(possible_b64.set_index('config_value')['config_value_count'])
    with col1:
        #with st.expander("sorted occurence of string:"):
        #    st.write(sorted(count_occurence.items(),key=operator.itemgetter(1),reverse=True))
        with st.expander("sorted occurence of string:"):
                st.write(df)

    with col2:
        with st.expander("possible c2 server:"):
            st.write(possible_c2)

        with st.expander("possible server port:"):
            st.write(possible_port)
        with st.expander("possible b64:"):
            possible_b64['decoded_64'] = decoded_b64
            st.write(possible_b64)
        with st.expander("possible registry persistence:"):
            st.write(possible_persistence)
        with st.expander("possible drop file name:"):
            st.write(possible_exe)

    
    return
page_names_to_funcs = {
    "configuration": config_viewer,
    "stats": stats,

    
    

}
st.set_page_config(layout="wide")
demo_name = st.sidebar.selectbox("Choose a task", page_names_to_funcs.keys())
page_names_to_funcs[demo_name]()