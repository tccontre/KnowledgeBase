// MBR-REWIND.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include "stdafx.h"
#include "Helper.h"
#include "simulate.h"

#define MAX_FILE_PATH_LEN 512

void ShowBanner(HANDLE, WORD);
void Banner(HANDLE, WORD, int);
void WarningMessage(HANDLE, WORD, int);
void Help(HANDLE , WORD , int );
void ReadBanner(HANDLE, WORD, int);
void WriteBanner(HANDLE, WORD, int);
void RestoreBanner(HANDLE, WORD, int);
void SimulateBanner(HANDLE, WORD, int);
void BackupBanner(HANDLE, WORD, int);
void TestBanner(HANDLE, WORD, int);

void ShowBanner(HANDLE hConsole, WORD wOriginalAttributes)
{
    Banner(hConsole, wOriginalAttributes, BANNER_FOREGROUND);
    WarningMessage(hConsole, wOriginalAttributes, WARN_FOREGROUND);
    Help(hConsole, wOriginalAttributes, TEXT_FOREGROUND);

}

void Banner(HANDLE hConsole, WORD wOriginalAttributes, int iForeground)
{
    DWORD dwfd;
    dwfd = _setmode(_fileno(stdout), _O_WTEXT);
    if (dwfd == -1)
    {
        ErrorExit(TEXT("(Banner function) - _setmode (set) "), hConsole, wOriginalAttributes);
    }

    SetConsoleTextAttribute(hConsole, iForeground);
    wprintf(L"\n\n");
    wprintf(L"     ███╗   ███╗██████╗ ██████╗       ██████╗ ███████╗██╗    ██╗██╗███╗   ██╗██████╗   \n");
    wprintf(L"     ████╗ ████║██╔══██╗██╔══██╗      ██╔══██╗██╔════╝██║    ██║██║████╗  ██║██╔══██╗  \n");
    wprintf(L"     ██╔████╔██║██████╔╝██████╔╝█████╗██████╔╝█████╗  ██║ █╗ ██║██║██╔██╗ ██║██║  ██║  \n");
    wprintf(L"     ██║╚██╔╝██║██╔══██╗██╔══██╗╚════╝██╔══██╗██╔══╝  ██║███╗██║██║██║╚██╗██║██║  ██║  \n");
    wprintf(L"     ██║ ╚═╝ ██║██████╔╝██║  ██║      ██║  ██║███████╗╚███╔███╔╝██║██║ ╚████║██████╔╝  \n");
    wprintf(L"     ╚═╝     ╚═╝╚═════╝ ╚═╝  ╚═╝      ╚═╝  ╚═╝╚══════╝ ╚══╝╚══╝ ╚═╝╚═╝  ╚═══╝╚═════╝   \n");
    wprintf(L"\n\n");
    wprintf(L"                             by. ---| Br3akp0int-tccontre |---\n\n\n");
    SetConsoleTextAttribute(hConsole, wOriginalAttributes);

    int fd = _setmode(_fileno(stdout), dwfd);
    if (fd == -1)
    {
        ErrorExit(TEXT("(Banner function) - _setmode (restore) "), hConsole, wOriginalAttributes);
    }
}


void WarningMessage(HANDLE hConsole, WORD wOriginalAttributes, int iForeground)
{
    SetConsoleTextAttribute(hConsole, iForeground);
    printf("+-------------------------------------------------------------------------------------------------------------+\n");
    printf("* [WARNING]: USE AT YOUR OWN RISK!!!!. DONT USE OR TEST THIS TOOL IN PRODUCTION OR NON-TEST LAB MACHINE.\n");
    printf("*            THIS TOOL WAS DESIGNED FOR RESEARCH, TESTING AND EDUCATIONAL PURPOSES.  IF YOU DOWNLOAD OR \n");
    printf("*            USE THIS TOOL/CODE, YOU ARE COMPLETELY RESPONSIBLE FOR ANY RESULTING LOSS OR DAMAGES.\n");
    printf("*            THE AUTHOR HAS NO RESPONSIBILITIES FOR ERRORS, DAMAGES, LOSS, INACCURACY OR OMMISION IN \n");
    printf("*            THE CONTENT UPON USING IT.\n");
    printf("+-------------------------------------------------------------------------------------------------------------+\n");
    SetConsoleTextAttribute(hConsole, wOriginalAttributes);
}

VOID Help(HANDLE hConsole, WORD wOriginalAttributes, int iForeground)
{
    SetConsoleTextAttribute(hConsole, iForeground);
    printf("+-------------------------------------------------------------------------------------------------------------+\n");
    printf("* \n");
    printf("* [DESCRIPTION] : This tool was designed to read, overwrite and restore MBR code. \n");
    printf("* [USAGE]: MBR-REWIND.exe <argv-options> \n");
    printf("* \n");
    printf("* <argv-options> : \n");
    printf("* -h, --help                        : show this help banner\n");
    printf("* -b, --backup                      : create a MBR backup fore restore feature\n");
    printf("* -r, --read_mbr                    : read, display and MBR code into a file\n");
    printf("* -o, --overwrite_mbr               : overwrite MBR code with mbr save in file 'mal_mbr.bin' in current directory\n");
    printf("* -re, --restore_mbr                : restore backup MBR code that are generated upon running this tool\n");
    printf("* -su, --simulate_unint             : simulate attack where it over write MBR code with un-initialize allocated mem buffer.\n");
    printf("* -se, --simulate_encrypt           : simulate attack where it xor-encrypt the original MBR code.\n");
    printf("* -sz, --simulate_zeroing           : simulate attack where it zeroed the MBR code.\n");
    printf("* -rt, --run_test                   : run read, overwrite and restore feature at once.\n");
    printf("* \n");
    printf("* \n");
    printf("+-------------------------------------------------------------------------------------------------------------+\n");

    SetConsoleTextAttribute(hConsole, wOriginalAttributes);
}

void ReadBanner(HANDLE hConsole, WORD wOriginalAttributes, int iForeground)
{
    SetConsoleTextAttribute(hConsole, iForeground);
    printf(" _____ _____ _____ ____      _____ _____ _____  \n");
    printf("| __  |   __|  _  |    \ ___|     | __  | __  | \n");
    printf("|    -|   __|     |  |  |___| | | | __ -|    -| \n");
    printf("|__|__|_____|__|__|____/    |_|_|_|_____|__|__| \n");
    printf("+ ----------------------------------------------------------------------------\n\n");
    SetConsoleTextAttribute(hConsole, wOriginalAttributes);

}

void WriteBanner(HANDLE hConsole, WORD wOriginalAttributes, int iForeground)
{
    SetConsoleTextAttribute(hConsole, iForeground);                                                                
    printf(" _____ _____ _____ _____ _ _ _ _____ _ _____ _____     _____ _____ _____   \n");
    printf("|     |  |  |   __| __  | | | | __  |_|_   _|   __|___|     | __  | __  | \n");
    printf("|  |  |  |  |   __|    -| | | |    -| | | | |   __|___| | | | __ -|    -| \n");
    printf("|_____|\___/|_____|__|__|_____|__|__|_| |_| |_____|   |_|_|_|_____|__|__| \n");
    printf("+ ----------------------------------------------------------------------------\n\n");
    SetConsoleTextAttribute(hConsole, wOriginalAttributes);

}

void RestoreBanner(HANDLE hConsole, WORD wOriginalAttributes, int iForeground)
{
    SetConsoleTextAttribute(hConsole, iForeground);
                                                                 
    printf(" _____ _____ _____ _____ _____ _____ _____     _____ _____ _____  \n");
    printf("| __  |   __|   __|_   _|     | __  |   __|___|     | __  | __  | \n");
    printf("|    -|   __|__   | | | |  |  |    -|   __|___| | | | __ -|    -| \n");
    printf("|__|__|_____|_____| |_| |_____|__|__|_____|   |_|_|_|_____|__|__| \n");
    printf("+ ----------------------------------------------------------------------------\n\n");
    SetConsoleTextAttribute(hConsole, wOriginalAttributes);

}


void SimulateBanner(HANDLE hConsole, WORD wOriginalAttributes, int iForeground)
{
    SetConsoleTextAttribute(hConsole, iForeground);
    printf(" _____ _____ _____ _____ __    _____ _____ _____  \n");
    printf("|   __|     |     |  |  |  |  |  _  |_   _|   __| \n");
    printf("|__   |-   -| | | |  |  |  |__|     | | | |   __| \n");
    printf("|_____|_____|_|_|_|_____|_____|__|__| |_| |_____| \n");
    printf("+ ----------------------------------------------------------------------------\n\n");
    SetConsoleTextAttribute(hConsole, wOriginalAttributes);
}


void BackupBanner(HANDLE hConsole, WORD wOriginalAttributes, int iForeground)
{
    SetConsoleTextAttribute(hConsole, iForeground);
                                                   
    printf("  _____         _   _____         _____ _____ _____   \n");
    printf(" | __  |___ ___| |_|  |  |___ ___|     | __  | __  | \n");
    printf(" | __ -| .'|  _| '_|  |  | . |___| | | | __ -|    -| \n");
    printf(" |_____|__,|___|_,_|_____|  _|   |_|_|_|_____|__|__| \n");
    printf("+ ----------------------------------------------------------------------------\n\n");
     SetConsoleTextAttribute(hConsole, wOriginalAttributes);
     }



void TestBanner(HANDLE hConsole, WORD wOriginalAttributes, int iForeground)
{
    SetConsoleTextAttribute(hConsole, iForeground);
    printf("  _____ _____ _____ ____      _ _ _ _____ _____ _____ _____     _____ _____ _____ _____ _____ _____ _____   \n");
    printf(" | __  |   __|  _  |    \ ___| | | | __  |     |_   _|   __|___| __  |   __|   __|_   _|     | __  |   __| \n");
    printf(" |    -|   __|     |  |  |___| | | |    -|-   -| | | |   __|___|    -|   __|__   | | | |  |  |    -|   __| \n");
    printf(" |__|__|_____|__|__|____/    |_____|__|__|_____| |_| |_____|   |__|__|_____|_____| |_| |_____|__|__|_____|  \n");
    printf("+ ----------------------------------------------------------------------------\n\n");
SetConsoleTextAttribute(hConsole, wOriginalAttributes);
}


int main(int argc, char* argv[])
{

    wchar_t* wcMBRCurrentStateFileName = L"_current_mbr_code.bin";
    wchar_t* wcMBRBackupStateFileName = L"backup_mbr_code.bin";
    wchar_t* wcMalMBRFileName = L"mal_mbr.bin";

    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    CONSOLE_SCREEN_BUFFER_INFO consoleInfo;
    WORD wOriginalAttributes;
    
    /* Save current console state attributes */
    GetConsoleScreenBufferInfo(hConsole, &consoleInfo);
    wOriginalAttributes = consoleInfo.wAttributes;
    DWORD nBufferLength = MAX_FILE_PATH_LEN;
    wchar_t wcCurDir[MAX_FILE_PATH_LEN] = { 0 };

    DWORD dwPathLen = GetCurrentDirectory(nBufferLength, wcCurDir);
    wchar_t lpstrBackUpFilePath[258] = { 0 };
    wcscpy_s(lpstrBackUpFilePath, _countof(lpstrBackUpFilePath), wcCurDir);
    wcscat_s(lpstrBackUpFilePath, _countof(lpstrBackUpFilePath), L"\\");
    wcscat_s(lpstrBackUpFilePath, _countof(lpstrBackUpFilePath), wcMBRBackupStateFileName);
    BOOL result = 0;
    if (argc != 2 )
    {
        ShowBanner(hConsole, wOriginalAttributes);
    }
    if (strcmp(argv[1], "-h") == 0 || strcmp(argv[1], "--help") == 0)
    {
        ShowBanner(hConsole, wOriginalAttributes);
    }
    else if (strcmp(argv[1], "-b") == 0 || strcmp(argv[1], "--backup") == 0)
    {
        BackupBanner(hConsole, wOriginalAttributes, BANNER_FOREGROUND);
        ReadDisplaySaveMBRCode(BOOT_SECTOR_SIZE, hConsole, wOriginalAttributes, wcMBRBackupStateFileName, 0, HEX_FOREGROUND);
    }
    else if (strcmp(argv[1], "-r") == 0 || strcmp(argv[1], "--read_mbr") == 0)
    {
        ReadBanner(hConsole, wOriginalAttributes, BANNER_FOREGROUND);
        result = CheckIfFileExist(lpstrBackUpFilePath, hConsole, wOriginalAttributes);
        if(result)
            ReadDisplaySaveMBRCode(BOOT_SECTOR_SIZE, hConsole, wOriginalAttributes, wcMBRCurrentStateFileName, 1, HEX_FOREGROUND);

    }
    else if (strcmp(argv[1], "-o") == 0 || strcmp(argv[1], "--overwrite_mbr") == 0)
    {
        WriteBanner(hConsole, wOriginalAttributes, BANNER_FOREGROUND);
        result = CheckIfFileExist(lpstrBackUpFilePath,hConsole, wOriginalAttributes);
        if (result)
        {
            OverwriteMBRSector(wcMalMBRFileName, BOOT_SECTOR_SIZE, hConsole, wOriginalAttributes);
            ReadDisplaySaveMBRCode(BOOT_SECTOR_SIZE, hConsole, wOriginalAttributes, wcMBRCurrentStateFileName, 1, WRITE_FOREGROUND);
        }
           
    }
    else if (strcmp(argv[1], "-re") == 0 || strcmp(argv[1], "--restore_mbr") == 0)
    {
        RestoreBanner(hConsole, wOriginalAttributes, BANNER_FOREGROUND);
        result = CheckIfFileExist(lpstrBackUpFilePath, hConsole, wOriginalAttributes);
        if (result)
        {
            OverwriteMBRSector(wcMBRBackupStateFileName, BOOT_SECTOR_SIZE, hConsole, wOriginalAttributes);
            ReadDisplaySaveMBRCode(BOOT_SECTOR_SIZE, hConsole, wOriginalAttributes, wcMBRCurrentStateFileName, 1, RESTORE_FOREGROUND);
        }
    }
    else if (strcmp(argv[1], "-rt") == 0 || strcmp(argv[1], "--run_test") == 0)
    {
        TestBanner(hConsole, wOriginalAttributes, BANNER_FOREGROUND);
        result = CheckIfFileExist(lpstrBackUpFilePath, hConsole, wOriginalAttributes);
        if (result)
        {
            ReadDisplaySaveMBRCode(BOOT_SECTOR_SIZE, hConsole, wOriginalAttributes, wcMBRCurrentStateFileName, 1, HEX_FOREGROUND);
            OverwriteMBRSector(wcMalMBRFileName, BOOT_SECTOR_SIZE, hConsole, wOriginalAttributes);
            ReadDisplaySaveMBRCode(BOOT_SECTOR_SIZE, hConsole, wOriginalAttributes, wcMBRCurrentStateFileName, 1, WRITE_FOREGROUND);
            OverwriteMBRSector(wcMBRBackupStateFileName, BOOT_SECTOR_SIZE, hConsole, wOriginalAttributes);
            ReadDisplaySaveMBRCode(BOOT_SECTOR_SIZE, hConsole, wOriginalAttributes, wcMBRCurrentStateFileName, 1, RESTORE_FOREGROUND);
        }

    }
    else if (strcmp(argv[1], "-su") == 0 || strcmp(argv[1], "--simulate_unint") == 0)
    {
        SimulateBanner(hConsole, wOriginalAttributes, BANNER_FOREGROUND);
        result = CheckIfFileExist(lpstrBackUpFilePath, hConsole, wOriginalAttributes);
        if (result)
        {
            MBROverWriteWithUnInitializedBufferOrZero(BOOT_SECTOR_SIZE, hConsole, wOriginalAttributes, 0);
            ReadDisplaySaveMBRCode(BOOT_SECTOR_SIZE, hConsole, wOriginalAttributes, wcMBRCurrentStateFileName, 1, WRITE_FOREGROUND);
        }

    }

    else if (strcmp(argv[1], "-sz") == 0 || strcmp(argv[1], "--simulate_zeroing") == 0)
    {
        SimulateBanner(hConsole, wOriginalAttributes, BANNER_FOREGROUND);
        result = CheckIfFileExist(lpstrBackUpFilePath, hConsole, wOriginalAttributes);
        if (result)
        {
            MBROverWriteWithUnInitializedBufferOrZero(BOOT_SECTOR_SIZE, hConsole, wOriginalAttributes, 1);
            ReadDisplaySaveMBRCode(BOOT_SECTOR_SIZE, hConsole, wOriginalAttributes, wcMBRCurrentStateFileName, 1, WRITE_FOREGROUND);
        }

    }
    else if (strcmp(argv[1], "-se") == 0 || strcmp(argv[1], "--simulate_encrypt") == 0)
    {
        SimulateBanner(hConsole, wOriginalAttributes, BANNER_FOREGROUND);
        result = CheckIfFileExist(lpstrBackUpFilePath, hConsole, wOriginalAttributes);
        if (result)
        {
            XorEncryptMBRCode(BOOT_SECTOR_SIZE, hConsole, wOriginalAttributes);
            ReadDisplaySaveMBRCode(BOOT_SECTOR_SIZE, hConsole, wOriginalAttributes, wcMBRCurrentStateFileName, 1, WRITE_FOREGROUND);
        }


    }
    else
    {
        ShowBanner(hConsole, wOriginalAttributes);
    }
    return(0);
}
