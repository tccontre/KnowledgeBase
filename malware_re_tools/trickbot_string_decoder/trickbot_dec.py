__author__ = "tccontre - br3akp0int"

"""
| description: 
| tool for decoding the modified base64 encoding function of trickbot to hide its string and IOC
"""
import os
import sys
import hashlib
import re
import argparse

def sar(val, n):
    #s = val & 0x80000000 # dword
    s = val & 0x8000 # bytes
    for i in range(0, n):
        val >>= 1
        #print i+1
        val |= s
    return val

def check_excess(enc_str):
    padding = 0
    enc_str_len = len(enc_str)
    excess = enc_str_len % 4
    return excess, enc_str_len

def initialized_var(size):

    # declare 4 byte list of null bytes
    dec_bytes = [0x00] * size

    # convert the list value to bytearray
    dec_bytes = bytearray(dec_bytes)
    return dec_bytes

def locate_index (byte, dec_key):
    #dec_key = "8Zc0LAFBSd4Vag6MJRqrTXkDIjve2Kpf/3GCm9OWPblhxzNiE17tnuoQHUYs+yw5"
    #dec_key = "XITOPsM7khDJ0F85KocQHAmRWNY2Cydvr/S6unLlq9gZEjb+t31wefBVUGiz4xpa"
    index_ptr = dec_key.find(chr(byte))
    return index_ptr

def decryption_routine_1(dec_bytes, dec_str):
    al = dec_bytes[1]
    cl = dec_bytes[0]
    dl = dec_bytes[1]

    al = sar(al, 4)
    cl = (cl << 2) & 0xFF
    al += cl
    dec_str += chr(al)
    al = dec_bytes[2]
    cl = al
    cl = sar(cl, 2)
    al = (al << 6) & 0xFF
    al += dec_bytes[3]
    cl &= 0x0f
    dl = (dl << 4) & 0xFF
    cl ^= dl
    dec_str += chr(cl)
    dec_str += chr(al)
    return dec_str


def decryption_routine_2(dec_bytes, dec_str):
    al = dec_bytes[1]
    cl = dec_bytes[0]
    dl = dec_bytes[1]

    al = sar(al, 4)
    cl = (cl << 2) & 0xFF
    al &= 3
    al = al + cl
    dec_str += chr(al)
    al = dec_bytes[2]
    cl = al
    cl = sar(cl, 2)
    cl &= 0x0f
    dl = (dl << 4) & 0xff
    al = (al << 6) & 0xff
    al += dec_bytes[3]
    cl ^= dl
    dec_str += chr(cl)
    dec_str += chr(al)

    return dec_str

def show():
    print("""
           --------------------------------------------------------------------------------------------------
                         / /_____(_)___/ /__ / /  ___  / /________/ /__ _______  ___/ /__ ____
                        / __/ __/ / __/  '_// _ \/ _ \/ __/___/ _  / -_) __/ _ \/ _  / -_) __/
                        \__/_/ /_/\__/_/\_\/_.__/\___/\__/    \_,_/\__/\__/\___/\_,_/\__/_/ 
                                                          by:
                                                       tccontre
           --------------------------------------------------------------------------------------------------
         """)

def main():
    parser = argparse.ArgumentParser(description="trickbot modified b64 string encoding algorithm")
    parser.add_argument('-key', '--custom_key', help='the custom b64 index table', required=True)
    parser.add_argument('-i', '--input_enc', help='encrypted string in a <.txt> file', required=True)

    args = vars(parser.parse_args())
    custom_key = args['custom_key']
    input_enc_txt = args['input_enc']
    
    # create list of the encrypted string
    show()
    with open (input_enc_txt, "rb") as f:
        enc_str_list = f.readlines()
        print ("total no. of encoded strings: {0}".format(len(enc_str_list)))
    for enc_str in enc_str_list:
        enc_str = enc_str.strip()
        index = 0
        size =4
        excess, enc_str_len = check_excess(enc_str)
        limit = enc_str_len
        dec_str = ""
        while limit:
            if limit >= 4:
                dec_bytes = initialized_var(size)
                for i in range (0, 4):
                    # locate the index of the char
                    index_ptr = locate_index(enc_str[index + i], custom_key)
                    dec_bytes[i] = index_ptr
                    #print hex(dec_bytes[i])
                limit -= 4
                index = index + i + 1
                dec_str = decryption_routine_1(dec_bytes, dec_str)


            else:
                dec_bytes = initialized_var(size)
                for i in range(0, limit):
                    # locate the index of the char
                    index_ptr = locate_index(enc_str[index + i], custom_key)
                    dec_bytes[i] = index_ptr
                    #print hex(dec_bytes[i])
                limit -= limit
                index = index + i + 1
                dec_str = decryption_routine_2(dec_bytes, dec_str).strip("\x00")
        print('{:100s} ---> {}'.format(enc_str.decode("utf-8") , dec_str))
    return


if __name__ == "__main__":
    main()
