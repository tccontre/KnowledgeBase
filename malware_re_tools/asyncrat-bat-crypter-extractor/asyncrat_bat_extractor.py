__author__ = "tccontre18 - Br3akp0int"

"""
malware     : BAT-Crypter-AsyncRAT-Extractor
description : a short python script to extract the AsyncRAT malware payload in prevalent bat-crypter loader commonly attached to malicious .one file. 
             
"""

from malduck import aes, unpad
import os
import sys
import argparse
import base64
import logging
import re
import subprocess
import gzip
import hashlib

def custom_logger(name):
    """
    description: function for creating debug logs for debugging error purposes
    :parameter:
    :name: module name that execute this logging function 
    """
    DEBUG_LOGNAME = "asyncrat_debug.log"
    ### delete old logs
    if os.path.isfile(DEBUG_LOGNAME):
        os.remove(DEBUG_LOGNAME)

    LOG_LEVEL = logging.DEBUG
    CONSOLE_LOG_LEVEL = logging.INFO
    LOG_FORMAT = '%(asctime)s - %(name)s - %(levelname)15s - %(funcName)-50s: codeline: %(lineno)4d - %(message)s'
    LOG_FILENAME = os.path.join(os.getcwd(), DEBUG_LOGNAME)


    ### set logging level
    logging.root.setLevel(LOG_LEVEL)
    dbg_format = logging.Formatter(LOG_FORMAT)
    logging.basicConfig(level=LOG_LEVEL, filename= LOG_FILENAME, format=LOG_FORMAT)
    logger = logging.getLogger(name)

    ### define a Handler which writes INFO messages or higher to the sys.stderr
    console = logging.StreamHandler()
    console.setLevel(CONSOLE_LOG_LEVEL)

    ### set a format which is simpler for console use
    formatter = logging.Formatter('%(levelname)-4s %(message)s')

    ### tell the handler to use this format
    console.setFormatter(formatter)

    ### add the handler to the root logger
    logging.getLogger().addHandler(console)

    return logger

### setting up your secretary logger :)
logger = custom_logger("__AsyncRatBatExtractor__")
logger.debug('[+] MSG: START PAYLOAD EXTRACTION')

class AsyncRATBatCrypterExtractor:

    def __init__(self):
        self.deobfuscated_buffer = ""
        self.enc_payload = ""
        self.extracted_payload_path = ""
        return


    def saving_payload(self, file_path, decrypt_payload):

        ### decompressed with gunzip
        with open(file_path, "r") as fr:
            buff = fr.read()
        decompress_payload_name = os.path.splitext (os.path.basename(file_path))[0] + "-decompressed.bin"
        compress_payload_name = os.path.splitext(os.path.basename(file_path))[0] + "-compressed.gz"

        compress_file_path = os.path.join(self.extracted_payload_path, compress_payload_name)
        decompress_file_path = os.path.join(self.extracted_payload_path, decompress_payload_name)
        
        ### saving the gzip file
        with open(compress_file_path, "wb") as fw:
            fw.write(decrypt_payload)

        with gzip.open(compress_file_path, "rb") as gfr:
            g_buff = gfr.read()

        with open(decompress_file_path,"wb") as gfw:
            gfw.write(g_buff)
        return


    def parse_bat_file(self, file_path):
        self.deobfuscated_buffer = ""
        self.enc_payload = ""
        with open(file_path, "r") as f:
            lines = f.readlines()
        with open("temp.bat", "a") as fw: 
            for line in lines:
                ### look for the obfuscated powershell script to be executed of the bat file
                ### this will look for the possible concatenated environment variable after it was initialized consecutively
                #logger.info("[+] [ searching .. ] for the obfuscated powershell line\n")
                if line[:2] == "::" and len(line) >= 4000:
                    logger.info("[+] [ found ] encoded and encrypted binary payload ...\n")
                    logger.info("[+] {}".format(line))
                    self.enc_payload = line                               
                if line[0] == "%" and line.find("=") == -1:
                    logger.info("[+] [ found ] possible obfuscated poweshell line ... -->")
                    logger.info("[+] {}".format(line))
                    new_line = "echo " + line
                    fw.write(new_line)
                    
                else:
                    fw.write(line)

        ### deobfuscate this environment variable concat
        logger.info("[+] [ searching .. ] is done...\n")
        
        self.deobfuscated_buffer = os.popen("temp.bat").read()
        logger.info("[+] de-obfuscated code:\n-----------------------------------------------------\n\n {} \n-----------------------------------------------------\n\n".format(self.deobfuscated_buffer))    

        ### parsing the de-obfuscated powershell
        aes_256_key, aes_256_iv = self.parse_aes_key_iv()

        ### decrypt the payload
        decrypt_payload = unpad(aes.cbc.decrypt(base64.b64decode(aes_256_key), base64.b64decode(aes_256_iv), base64.b64decode(self.enc_payload.replace("::",""))))

        #decrypt_payload = aes.cbc.decrypt(base64.b64decode(aes_256_key), base64.b64decode(aes_256_iv), base64.b64decode(self.enc_payload.replace("::","")))

        self.saving_payload(file_path, decrypt_payload)

        ### remove the temp.bat
        if os.path.isfile("temp.bat"):
            os.remove("temp.bat")
        
        return 


    def parse_aes_key_iv(self):
        aes_key_find = []
        aes_iv_find = []
        aes_key_ptn = re.compile("\.Key = \[System.Convert\]::\('gnirtS46esaBmorF'\[-1..-16\] -join ''\)\('([-A-Za-z0-9+/]*={0,3})'\);")
        aes_iv_ptn = re.compile("\.IV = \[System.Convert\]::\('gnirtS46esaBmorF'\[-1..-16\] -join ''\)\('([-A-Za-z0-9+/]*={0,3})'\);")

        aes_key_find  = aes_key_ptn.findall(self.deobfuscated_buffer)
        if aes_key_find:
            logger.info("[+] b64_aes256_key: {}".format(aes_key_find[0]))
        else:
            logger.error("[+] didn't found the base64 encoded aes 256 key\n")
            exit()

        aes_iv_find  = aes_iv_ptn.findall(self.deobfuscated_buffer)
        if aes_iv_find:
            logger.info("[+] b64_aes256_iv: {}".format(aes_iv_find[0]))
        else:
            logger.error("[+] didn't found the base64 encoded aes 256 IV\n")
            exit()

        logger.info("[+] parsing aes key done\n\n")
        
        return aes_key_find[0], aes_iv_find[0]


    def enum_files (self, input_dir_path):
        deobfuscated_buffer = ""

        self.extracted_payload_path = os.path.join(os.getcwd(), "extracted_payload")
    
        if not os.path.isdir(self.extracted_payload_path):
            os.mkdir(self.extracted_payload_path)
        
        for dirs, subdirs, files in os.walk(input_dir_path):
            for f in files:
                file_path = os.path.join(dirs, f)
                logger.info("[+] checking -> {}".format(file_path))

                ### parsing the bat file..
                self.parse_bat_file(file_path)
        return


def banner():
    print("""

  ____    _  _____       _                         ____      _  _____     _____      _                  _             
 | __ )  / \|_   _|     / \   ___ _   _ _ __   ___|  _ \    / \|_   _|   | ____|_  _| |_ _ __ __ _  ___| |_ ___  _ __ 
 |  _ \ / _ \ | |_____ / _ \ / __| | | | '_ \ / __| |_) |  / _ \ | |_____|  _| \ \/ / __| '__/ _` |/ __| __/ _ \| '__|
 | |_) / ___ \| |_____/ ___ \\__ \ |_| | | | | (__|  _ <  / ___ \| |_____| |___ >  <| |_| | | (_| | (__| || (_) | |   
 |____/_/   \_\_|    /_/   \_\___/\__, |_| |_|\___|_| \_\/_/   \_\_|     |_____/_/\_\\__|_|  \__,_|\___|\__\___/|_|   
                                  |___/                                                                               
    by: Br3akp0int - tccontre18
    """)

    print("[+] example snippet code of this bat crypter: \n\n")

    print("---------------------------------------------------------------------------\n\n")
    print("""
            %CFdt%"swRWJdoiES=ptog"
            ▓%CFdt%"DOvyXEqLkW=-win"
            ▓%CFdt%"eOAKYWckkK=);$e"
            ▓%CFdt%"RGtOOwPhBI=axSc"
            ▓%CFdt%"tIKmexNVYV=ionM"
            ▓%CFdt%"XNSNSImenX=Bmor"
            ▓%CFdt%"tyysnVBcbx=den "
            ▓%CFdt%"qrRSbwdaZb=6] -"
            ▓%CFdt%"wpkKnbaDLt=embl"
            ▓%CFdt%"ZGrpGEfVbk=;$yZ"
            ▓%CFdt%"KNvCHubulS=tS46"
            ▓%CFdt%"XnJeEpkebL=yste"
            ▓%CFdt%"dDLvtFSpWQ=y.Cr"
            ▓%CFdt%"KIBvjiFbut=rans"
            ▓%CFdt%"qbZRfCFaKt=raph"
            ▓%CFdt%"RrQfSZyUJk=form"
            ▓%UESUWujuqD%%QhdyqPbjrg%%AbYfAzBOQC%%DicCzhrrgE%%CcgyuqjTmJ%%DdEKqSGNtw%%SvEOZHeBZj%%xKcMDyUALk%%qIBgYADslG%%AEXKLhysyM
            ▓cls
            ▓%DerVvCVEAd%%HOIxvYoZng%
            ▓%WmuROIwSrY%%GecsaBLNjE%%vrWJGSXZEn%%CMScGJkJpY%%sPfxsjXVgS%%DOvyXEqLkW%%LwodvUmZLq%%rcxkmGlyqw%%UcTLKOqteb%%tyysnVBcbx
            ▓TDf%%VuLdpvDGpJ%%miZfawcqkw%%AirgthKqZO%%sgzbVhZbWp%%bBvVOeVjUq%%gKJhFNdFJi%%KnHBqgIXjT%%wauUuZMvro%%lBvIHHxswi%%durOEO
            ▓vnwumgd%%zUZVoGAJlg%%RDKkNjYinG%%OXFrhKCWXP%%NlKvoXClJE%%IzPIPRYOId%%xmYApBoHNE%%dDLvtFSpWQ%%HNyJXpiWBq%%MNoUsAnkfM%%JU
            ▓%LqnPVUyUsP%%BGMcZMZqJZ%%XxKoFfayfY%%SubDylpnNn%%HKOAUgfbBK%%iTAldnGZjP%%TaOuXgFiDO%%wMCwsmJkuy%%aZWvPYUPAl%%FqdYuGVuCO
            ▓UkW%%roKvDGlcqa%%ENtYSekCuy%%HbeDIEsRLE%%qrRSbwdaZb%%iZdlnyNeJS%%PyALopjgNY%%nuqMKnWBXw%%bkCspIXSpj%%RnhSPSQfDM%%mWnaOO
            ▓mUZDLAa%%OCNplckkdM%%fWOmOovTjB%%xDDXaCGhJj%%ZMcEVzPVZa%%MCweAIFsyF%%EKBYCkYPoI%%wdAUMtTjqp%%yAUjPVhzws%%XnJeEpkebL%%Aa
            ▓%FTRLefTQdM%%IDdYKAFQaP%%CeiqTCLkgQ%%HkPhaPfUYw%%xnnlWNVfST%%GxrSQALBRC%%tIKmexNVYV%%uLRDroRWug%%HGsnkjSWqz%%dDcwdODagy
            ▓cxU%%TWVnLqUEeK%%wpkKnbaDLt%%fKNITgoSmO%%gmCtLlPYNY%%VjiGvGomxD%%oOrePiimuE%%cbsqEjNQZb%%mbPNyWChnm%%SbuJAsVyEC%%dDEjVT
            ▓(goto) 2>nul & del "%~f0"

    """)
    print("---------------------------------------------------------------------------\n\n")
    return

def main():
    banner()
    
    parser = argparse.ArgumentParser(description = "BAT-Crypter-AsyncRAT-Extractor")
    parser.add_argument('-i', '-bat-file',  dest ='batfile', help = ".bat contains the encrypted binary payload. either file or multiple bat in a dir", required=True)
    args = parser.parse_args()

    arbace = AsyncRATBatCrypterExtractor()
        
    if os.path.isfile(args.batfile):
        logger.info("[+] input argv is a file path : {}".format(args.batfile))
        arbace.parse_bat_file(args.batfile)
        os.remove("temp.bat")
        
    elif os.path.isdir(args.batfile):
        logger.info("[+] input argv is a folder path : {}".format(args.batfile))
        arbace.enum_files(args.batfile)
        
    return



if __name__ == "__main__":
    main()
